name:

on:
  push:
    tags:
      - '*'

jobs:
  release:
    runs-on: ubuntu-18.04

    services:
      mongodb:
        image: mongo:4.0
        ports:
          - 27017:27017

    steps:
      - uses: actions/checkout@v2

      - name: Use Node.js 12.19.x
        uses: actions/setup-node@v1
        with:
          node-version: 12.19.x

      - name: Get release version
        id: get_release_version
        run: echo ::set-output name=VERSION::${GITHUB_REF#refs/tags/}

      # https://github.com/actions/cache/blob/master/examples.md#node---yarn
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Main - Install dependencies
        run: |
          yarn install

      - name: Api - Build
        run: |
          cd api
          rm -rf node_modules
          yarn install --production
          yarn build

      - name: Email Verifier - Build
        run: |
          cd email-verifier
          yarn install --production
          yarn build

      - name: Engages - Build
        run: |
          cd engages-email-sender
          yarn install --production
          yarn build

      - name: Logger - Build
        run: |
          cd logger
          yarn install --production
          yarn build

      - name: Integrations - Build
        run: |
          cd integrations
          rm -rf node_modules
          yarn install --production
          yarn build

      - name: UI - Build
        run: |
          cd ui
          rm -rf node_modules
          yarn install --production
          yarn build

      - name: Widgets - Build
        run: |
          cd widgets
          rm -rf node_modules
          yarn install --production
          yarn build

      - name: Dashobard - UI - Build
        run: |
          cd dashboard-ui
          rm -rf node_modules
          yarn install --production
          yarn build-local

      - name: Prepare release assets
        run: |
          mkdir build

          mv ui/build build/ui

          mkdir build/widgets
          mv widgets/dist widgets/node_modules widgets/locales widgets/static widgets/package.json build/widgets

          mv api/dist build/api
          mv api/node_modules api/db-migrate-store.js api/package.json build/api

          mv email-verifier/dist build/email-verifier
          mv email-verifier/node_modules email-verifier/package.json build/email-verifier

          mv engages-email-sender/dist build/engages
          mv engages-email-sender/node_modules engages-email-sender/package.json build/engages

          mv logger/dist build/logger
          mv logger/node_modules logger/package.json build/logger

          mv integrations/dist build/integrations
          mv integrations/node_modules integrations/package.json build/integrations

          mv elkSyncer build/elkSyncer
          mv dashboard-api build/dashboard-api
          mv dashboard-ui/build build/dashboard-ui

          mv build /build-local
          rm -rf /build-local/dashboard-ui
          mv dashboard-ui/build /build-local/dashboard-ui

          tar -zcf erxes-${GITHUB_REF#refs/tags/}.tar.gz build
          tar -zcf erxes-${GITHUB_REF#refs/tags/}.tar.gz build-local

      - name: Upload release assets
        uses: softprops/action-gh-release@v1
        with:
          files: |
            erxes-${{ steps.get_release_version.outputs.VERSION }}.tar.gz
          name: Release ${{ steps.get_release_version.outputs.VERSION }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
